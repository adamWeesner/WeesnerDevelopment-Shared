package shared.auth

import shared.base.GenericItem
import shared.currentTimeMillis
import shared.toJson

/**
 * A user.
 *
 * @param uuid The UUID as a string, of the user, if there is one. This is usually generated by the backend.
 * @param name The name of the user, if there is one.
 * @param email The email of the user, if there is one.
 * @param photoUrl The photo url of the user, if there is one.
 * @param username The hashed username of the user, if there is one.
 * @param password The hashed password of the user, if there is one.
 *
 * @see GenericItem.id
 * @see GenericItem.dateCreated
 * @see GenericItem.dateUpdated
 */
class User(
    override var id: Int? = null,
    val uuid: String? = null,
    val name: String?,
    val email: String?,
    val photoUrl: String? = null,
    var username: String? = null,
    var password: String? = null,
    override val dateCreated: Long = currentTimeMillis(),
    override val dateUpdated: Long = currentTimeMillis()
) : GenericItem {
    /**
     * [User] as a [HashedUser].
     */
    fun asHashed() =
        if (username != null && password != null) HashedUser(username!!, password!!)
        else null

    /**
     * [User] with the sensitive fields set to null.
     */
    fun redacted() = User(
        name = name,
        email = email,
        username = username,
        dateCreated = dateCreated,
        dateUpdated = dateUpdated
    ).toJson()
}
