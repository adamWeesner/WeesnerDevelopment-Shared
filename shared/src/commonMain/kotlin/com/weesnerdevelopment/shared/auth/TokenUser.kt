package com.weesnerdevelopment.shared.auth

import com.weesnerdevelopment.shared.base.GenericItem
import com.weesnerdevelopment.shared.base.History
import com.weesnerdevelopment.shared.base.HistoryItem
import com.weesnerdevelopment.shared.base.UuidItem
import com.weesnerdevelopment.shared.currentTimeMillis
import com.weesnerdevelopment.shared.toJson
import kotlinx.serialization.Serializable

/**
 * A user.
 *
 * @param uuid The UUID as a string, of the user, if there is one. This is usually generated by the backend.
 * @param email The email of the user, if there is one.
 * @param photoUrl The photo url of the user, if there is one.
 * @param username The hashed username of the user, if there is one.
 * @param password The hashed password of the user, if there is one.
 *
 * @see GenericItem.id
 * @see GenericItem.dateCreated
 * @see GenericItem.dateUpdated
 * @see HistoryItem.history
 * @see TokenItem.refreshToken
 * @see TokenItem.expiresIn
 * @see TokenItem.refreshToken
 */
@Serializable
data class TokenUser(
    override var id: Int? = null,
    override var uuid: String? = null,
    val email: String?,
    val photoUrl: String? = null,
    val username: String? = null,
    val password: String? = null,
    override val authToken: String,
    override val refreshToken: String,
    override val expiresIn: Long,
    override var history: List<History>? = null,
    override val dateCreated: Long = currentTimeMillis(),
    override val dateUpdated: Long = currentTimeMillis()
) : GenericItem, UuidItem, HistoryItem, TokenItem {
    /**
     * [TokenUser] as a [HashedUser].
     */
    fun asHashed() =
        if (username != null && password != null) HashedUser(username!!, password!!)
        else null

    /**
     * [TokenUser] with the sensitive fields set to null.
     */
    fun redacted() = TokenUser(
        uuid = uuid,
        email = email,
        username = username,
        authToken = authToken,
        expiresIn = 0L,
        refreshToken = "",
        dateCreated = dateCreated,
        dateUpdated = dateUpdated
    ).toJson()
}
